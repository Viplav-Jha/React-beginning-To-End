import React from 'react';
import './App.css';
const newElement= React.Component('h2',{className:'newElement'},'Hello H2 tag') //without JSX



  // With JSX
 const test =()=>{
   alert("Hello viplav");
 }
 
  function App() {
    return (
    <div className="App">
      <h1> Hello {newElement}</h1>
      {newElement}
     <button onClick={test} > </button>
    </div>
    );
  }
export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
ort './App.css';

import { render } from '@testing-library/react'

// class component example

class App extends React.Component
{
  render(){
    return <h1>Hello, class component</h1>
    
  }
}

 export default App;
 ----------------------------------------------------------------------------------------------------------------------------
 // class with functional components uses
 
 import React from 'react';
import './App.css';
import { Header } from './components/Header';

//import { render } from '@testing-library/react'

// class component example

class App extends React.Component
{
  render(){
    return (
      <div className="App" >
        <Header />
      </div>
    );
    
  }
}
---------------------------------------------------------------
// Header.js

import React from 'react';
 
 export const Header =()=> {

    return  <h1> Hello, functional components</h1>
    
}
// export default Header();
------------------------------------------------------------------------------
Why JSX?

JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. 
JSX converts HTML tags into react elements.
You are not required to use JSX, but JSX makes it easier to write React applications

Example:
const name ="John";
const element = <h1>Hello , {name} </h1>

ReactDOM.render(element, document.getElementById("root");)
