import React from 'react';
import './App.css';
const newElement= React.Component('h2',{className:'newElement'},'Hello H2 tag') //without JSX

 // With JSX
 const test =()=>{
   alert("Hello viplav");
 }
 
  function App() {
    return (
    <div className="App">
      <h1> Hello {newElement}</h1>
      {newElement}
     <button onClick={test} > </button>
    </div>
    );
  }
export default App;
----------------------------------------------------------------------------------------------------------------------------------------------------------
ort './App.css';

import { render } from '@testing-library/react'

// class component example

class App extends React.Component
{
  render(){
    return <h1>Hello, class component</h1>
    
  }
}

 export default App;
 ----------------------------------------------------------------------------------------------------------------------------
 // class with functional components uses
 
 import React from 'react';
import './App.css';
import { Header } from './components/Header';

//import { render } from '@testing-library/react'

// class component example

class App extends React.Component
{
  render(){
    return (
      <div className="App" >
        <Header />
      </div>
    );
    
  }
}
---------------------------------------------------------------
// Header.js

import React from 'react';
 
 export const Header =()=> {

    return  <h1> Hello, functional components</h1>
    
}
// export default Header();
------------------------------------------------------------------------------
Why JSX?

JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods. 
JSX converts HTML tags into react elements.
You are not required to use JSX, but JSX makes it easier to write React applications

Example:
const name ="John";
const element = <h1>Hello , {name} </h1>

ReactDOM.render(element, document.getElementById("root");)
---------------------------------------------------------------------------------
 Embed the result of calling a JavaScript function, formatName(user), into an <h1> element.
 
 function fromateName(user){
 return  user.firstName '+ ' user.lastName 
 }
 
 const user ={
 firstName="viplav",
 lastName="Jha"
 }
 const element (
 <h1> Hello , {formatName(user)} </h1>
 );
 
 ReactDOM.render ( element , document.getElementID("root");
 )
 
----------------------------------------------------------------------------------------------------------------
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);

We call ReactDOM.render() with the <Welcome name="Sara" /> element.
React calls the Welcome component with {name: 'Sara'} as the props.
Our Welcome component returns a <h1>Hello, Sara</h1> element as the result.
React DOM efficiently updates the DOM to match <h1>Hello, Sara</h1>
 
JSX using with IF/else
------------------------------------------------------------
 function getGreeting(user){
  if(user)
    {
      <h1> Hello ,{formatName(user)} </h1>
    }
  <h1> Hello Stranger. </h1>
}
----------------------------------------------------------------
Rendering Elements

function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  // highlight-next-line
  ReactDOM.render(element, document.getElementById('root'));
}

setInterval(tick, 1000);
